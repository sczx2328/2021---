import pandas as pd
import os

from pandas_profiling import ProfileReport
from sklearn.preprocessing import StandardScaler

if __name__ == '__main__':
    dataset_path = os.path.join('~/s3data/dataset', 'titanic', 'train.csv')

    # 读取数据
    df = pd.read_csv(dataset_path)

    # 显示所有列
    pd.set_option('display.max_columns', None)
    # 显示所有行
    # pd.set_option('display.max_rows', None)
    # 设置value的显示长度为100，默认为50
    # pd.set_option('max_colwidth', 100)

    # 前十条示例数据
    print("示例数据：")
    print(df.head(10))
    print("-"*40)

    # 数据基本信息
    print("数据基本信息：")
    print(df.info())
    print("-" * 40)

    # 数据分析
    print("数据简要分析：")
    print(df.describe(include='all'))
    print("-" * 40)

    # 生成详细分析报告，选中practice2目录，标题栏点击Tools->Deployment->Download from xxx 即可同步服务器的文件
    profile = ProfileReport(df, title="Pandas Profiling Report")
    # 右键点击analysis.html，点击Open in Browser，点击浏览器，即可打开分析报告
    profile.to_file("analysis.html")

    # Ticket 大多数是唯一值，没有训练意义，舍弃该特征
    df.drop("Ticket", axis=1, inplace=True)

    # 缺失值处理
    # Cabin 缺失大量数据，舍弃该特征
    df.drop("Cabin", axis=1, inplace=True)

    # Embarked 缺失少量数据，可用众数填充
    df.get('Embarked').fillna(df.get('Embarked').mode()[0], inplace=True)

    # 离散化处理
    # 对 Age 进行连续值离散化处理
    df['Age'] = pd.cut(df.get('Age'), bins=[0, 18, 40, 60, 99], labels=['juvenile', 'youth', 'middle', 'old'])
    # Age 缺失少量数据，可用missing填充
    df['Age'] = (df['Age'].cat.add_categories('missing').fillna('missing'))

    # 标准化
    # 对Pclass，SibSp，Parch 进行标准化
    ss = StandardScaler()
    df['Pclass'] = ss.fit_transform(df[['Pclass']])
    df['SibSp'] = ss.fit_transform(df[['SibSp']])
    df['Parch'] = ss.fit_transform(df[['Parch']])

    # 前十条示例数据
    print("示例数据：")
    print(df.head(10))
    print("-" * 40)

    # 数据基本信息
    print("数据基本信息：")
    print(df.info())
    print("-" * 40)

    # 数据分析
    print("数据简要分析：")
    print(df.describe(include='all'))
    print("-" * 40)

    # 输出结果
    path = 'preprocess_data.csv'
    df.to_csv(path, index=False)
